Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Warmup
-------
Q1. How do the values of the member variables of `allBalls[0]` change from iteration to iteration? Specifically, what happens to the values of `_id`, `_x`, and `_y`?
A1. _id was not changing, _x  and _y is varying according to _vx and _vy. the ball is moving along a straight line until bouncing back from a wall

Q2. How do the values of the member variables of the stuck ball change from iteration to iteration? Contrast this to your answer to the previous question.
A2. _x was switching back and forth between two values because the sign of _vx was varying.

Q3. After forcing the stuck ball to position (0, 0), does the ball move normally from there or does it stay stuck?
A3. the ball moved normally from (0, 0) and never got stuck again.

Q4. On your system, what is the observed consequence of these memory errors:
- access an index outside the allocated array bounds?
A. no crashing but the processing result with the accessed value is not predictable
- delete same memory twice?

A.
*** STANFORD C++ LIBRARY
*** The PQueue program has terminated unexpectedly (crashed)
*** An abort error (SIGABRT) was raised during program execution
This error is raised by system functions that detect corrupt state
*** To get more information about a program crash,
*** run your program again under the debugger.
the program crashed, and the labels of the elements within the bound became <not accessible> after the second deletion.

- access memory after it has been deleted?
the content stored before deletion was still there

PQArray
-------
Q5. There are extensive comments in both the interface (`pqarray.h`) and implementation (`pqarray.cpp`). Explain how and why the comments in the interface differ from those in the implementation. Consider both the content and audience for the documentation.
A5. the interface is for client, so its focus is how to use the library or the class. the implementation reveals more details for implementers.

Q6. The class declares member variables `_numAllocated` and `_numFilled`. What is the difference between these two counts and why are both needed?
A6. _numAllocated represents the capacity of the queue;  _numFilled represents how many elements have been put into the queue.
    To use memory efficiently, additional memory is allocated when _numAllocated == numFilled.

Q7. Although code within the body of a member function can directly access the object's member variables, the implementer may instead choose to call public member functions to get information about the object. For example, note how the operations `isEmpty()` and `peek()` intentionally call `size()` instead of using `_numFilled` or how `dequeue()` calls `peek()` to retrieve the frontmost element. Why might be this be considered a better design?
A7. It avoid code duplicates. Less places need to be revised when there are implementation changes.

Q8. Give the results from your time trials and explain how they support your prediction for the Big-O runtimes of  `enqueue` and `dequeue`.
A8.
Each dequeue takes O(1), so the n operations would take O(n)
        n (operations)  time (sec)
        40000		0.001
        80000		0.003
        120000		0.005
        160000		0.007
Each enqueue takes O(n), so the n operations would take O(n^2) (1 + 2 + …+ n)
        n (operations)  time (sec)
        10000		0.64
        20000		2.63
        40000		11.03
        80000		39.82

PQ Client
---------
Q9. Based on the Big O of `enqueue`/`dequeue`, what do you expect for the Big O of `pqSort` if using a `PQArray`? Run some timing trials to confirm your prediction, and include that data in your answer.
A9. enqueuing n elements would take time proportional to n^2 and dequeuing n elements takes time proportional to n.
Therefore, the BigO is O(n^2)
  n         time (sec)
20000         2.512
40000         9.987
80000         39.475
160000       157.879

Q10. Based on the Big O of `enqueue`/`dequeue`, what do you expect for the Big O of `topK` in terms of `k` and `n` if using a `PQArray`? Run some timing trials to confirm your prediction, and include that data in your answer.
A10. There are respectively n enqueues and n dequeues. With the assumption that n is much larger than k,
the runtime would be n * O(k) + n * O(1) ~ O(nk).

It is important to apply stringstream asStream(int start, int stop) to create an ascending sequence,
which would induce enqueue for each iteration and the number of array elements swap would be linear for each enqueue.

Fix k, vary n
n		k		time(sec)
200,000		10		0.273
400,000		10		0.543
800,000		10		1.092
1600,000	10		2.185

Fix n, vary k
n		k		time(sec)
100,000		500		1.330
100,000		1000		2.642
100,000		2000		5.123
100,000		4000		10.033


PQHeap
------
Q11. Start with an empty binary heap and enqueue the nine `DataPoint`s in the order shown below and show the result. You only need to show the final heap, not intermediate steps. Draw the heap as tree-like diagram with root element on top, its two children below, and so on. Yes, we know that we're asking you to draw pictures in a text file (we love the [AsciiFlow](http://asciiflow.com/) tool for "drawing" in text).
A11.
                        “T”, 1**

                “B”, 3.              “G”, 2

        “S”, 6      “A”, 5       “V”, 9.   “R”, 4

   “O”, 8.    “K”, 7

Q12. Make two calls to `dequeue` on the above binary heap and draw the updated result.
A12.
                     “B”, 3

            “A”, 5            “R”, 4

        “S”, 6  “O”, 8   “V”, 9.   “K”, 7


Q13. Draw the array representation of the binary heap above. Label each element with its array index.
A13.
   0      1       2      3     4       5     6
[”B” 3, “A” 5, “R” 4, “S” 6, “O” 8, “V” 9, “K” 7}

Q14. Re-run the timing trials on `pqclient.cpp` and provide your results that confirm that `pqSort` runs in time O(NlogN) and `topK` in O(NlogK).
A14. TODO

Embedded Ethics
---------------
Q15. Consider the differences between this three-bin priority queue and the priority queue you implemented on your assignment. Which would be more efficient to insert elements into and why? More generally, what are the benefits and disadvantages of using the three-bin priority queue vs. a regular priority queue?
A15. TODO

Q16. Describe a real-world system where a three-bin priority queue could be used. What factors would you use to distinguish between a low vs. medium vs. high priority element? What limitations might you need to consider when using a three-bin priority queue to represent this system?
A16. TODO

Q17. Different admissions departments consider different factors and convert admissions criteria to numbers in different ways. Regardless of what specific factors are considered, should an admissions department use a purely numerical ranking system for applicants? Why or why not?

If yes, discuss what factors you think would be best to include when calculating numerical rankings and why those factors are well-represented as numbers. If not, discuss what factors you think should be considered in college admissions that would be difficult to represent as a numerical score. There are no right or wrong answers here – we're genuinely interested in your thoughts!
A17. TODO

Q18. Describe a real-world system that requires ranking but in which classification with a single number misses important context (i.e. a priority queue might not be the best way to store the objects being ranked). Make sure to use an example that hasn't already been discussed in lecture or in this assignment.
A18. TODO

Q19. Consider the PQueue class you just implemented. What would you change about the public interface to allow the hospital to dynamically update priorities in order to determine which patient is the best match for an organ? For any methods that you add, briefly describe when they would be used by the client and how they might be implemented privately. Note: Your design does not have to be the fastest or most efficient.
A19. TODO
