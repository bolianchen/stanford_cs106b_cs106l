Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Use the above encoding tree to decode the bit sequence `0101100011`.
A1. MOONS

Q2. Prepare a table for the above encoding tree that lists each character with its assigned bit sequence.
Use your table to encode the string `"SONS"`.
A2.
O: 1
N: 00
M: 010
S: 011
“SONS” ⇒ 0111000110

Q3. Huffman codes obey the _prefix_ property: no character's encoded bit sequence is a prefix of any other.
What feature of an encoding tree demonstrates that it obeys the prefix property?
A3.
characters only appear on the leaf nodes

Q4. Flatten the encoding tree above on the right into its sequence of bits and sequence of characters.
A4.

Q5. Unflatten the sequences `110100100` and `FLERA` to reconstruct the original encoding tree.
A5.
            *
        /       \
       *         *
     /   \      /   \
    F     *    R     A
        /   \
       L     E
Q6. Construct a Huffman coding tree for the input `"BOOKKEEPER"`.
A6.
11110000100
BPREKO

Q7. A node in a Huffman coding tree has two non-null children or no children.
Why does it not make sense for a node in a Huffman tree to have just one non-null child?
A7.
You can remove that one non-null child and replace its root with it to have a tree produce shorter encodings.

Q8. Describe the difference in shape of a Huffman coding tree that will lead to significant
savings for compression versus one that will achieve little to no compression.
A8.
one of the children of every subtree is a leaf ⇒ significant savings for compression
a balanced tree ⇒ little to no compression

Q9. In lecture, we talked about how no compression algorithm can compress every piece of input data.
Given the question above, what kinds of input strings would result in a Huffman tree with little to no compression? Provide an example string.
The counts of all characters are the same.
”judgment”
