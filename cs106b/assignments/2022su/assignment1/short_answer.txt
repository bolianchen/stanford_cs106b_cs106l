Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Perfect Numbers
---------------

Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Roughly how long did it take your computer to do the search? How many perfect numbers were found and what were they?
A1. It took around 6.5 seconds and four perfect number were found: 6, 28, 496, 8128

Q2. Record the timing results for `findPerfects` that you observed into a table.
A2.

size	time(sec)
14500	 0.983
29000	 3.688
58000    14.976
116000	 58.646

Q3-1. Does it take the same amount of work to compute `isPerfect` on the number 10 as it does on the number 1000? Why or why not?
A3-1. No, isPerfect only checks numbers from 1 to 9 for 10 but need to check 1 to 999 for 1000.
Q3-2. Does it take the same amount of work for `findPerfects` to search the range of numbers from 1-1000 as it does to search the numbers from 1000-2000? Why or why not?
A3. No, it takes more amount of work for 1000-2000 since findPerfects runs isPerfect on each number in the range and isPerfect takes more amount of work on a number from 1000-2000 than from 1-1000.

Q4. Extrapolate from the data you gathered and make a prediction: how long will it take `findPerfects` to reach the fifth perfect number?
A4.  findPerfects takes constant * n^2 time to check the range 1 to n. From the gathered data, the constant was around 4.5e-9. It would take findPerfects around 4.5e-9 * (3.3*e^7)^2 = 4900500 sec ~ 57 days

Q5. Do any of the tests still pass even with this broken function? Why or why not?
A5.
PROVIDED_TEST(”Confirm 12 and 98765 are not perfect”) still pass because the two tested numbers still are not equal to the divisor sum with 1 added.
STUDENT_TEST(”Inspect if isPerfect returns false for negative numbers”) still pass because negative numbers would always not equal 1 (for loop is not executed)

Q6. Describe the testing strategy you used for your test cases to confirm `smarterSum` is working correctly.
A6.
- Ensure its outputs are the same with divisor_sum at some corner cases that include some negative numbers, 1, some square numbers
- Ensure its outputs are the same for the first 4 perfect numbers

Q7. Record your timing results for `findPerfectsSmarter` into a table.
A7.
size	    time(sec)
575,000	     2.907
1,150,000    8.154
23,000,000   21.718
46,000,000   59.916

Q8. Make a prediction: how long will `findPerfectsSmarter` take to reach the fifth perfect number?
A8.
(33,000,000/4.600,000)^(3/2) * 59.916 ~ 1151 secs ~ 20 mins

Q9. Explain how you chose your specific test cases and why they lead you to be confident `findNthPerfectEuclid` is working correctly.
A9.
A 64-bit machine is able to compute up to the 8th perfect number.
Therefore, it is complete to apply EXPECT_EQUAL to check findNthPerfectEuclid on n = 1 ~ 8 with the actual perfect numbers.

Soundex
-------

Q10. What is the Soundex code for "Angelou"? What is the code for your own surname?
A10. TODO

Q11. Before writing any code, brainstorm your plan of attack and sketch how you might decompose the work into smaller tasks. Briefly describe your decomposition strategy.
A11. TODO

Q12. Think about one or more examples of a class of names that the Soundex system might not work well for. Explain what this class of names is and why the system might incorrectly group them or mis-categorize one of the names.
A12. TODO

Q13. Suppose you are a software engineer working for the U.S. government. You have been tasked with implementing a system that collects names as part of the Census survey and analyzes these names using a phonetic algorithm. Your boss suggests using Soundex and notes that the algorithm is only expected to work for ASCII-encoded strings, since supporting Unicode would require extra work and time. What would your response be and why? What representational harms might result from building a system that exclusively uses Soundex and/or ASCII?
A13. TODO


